<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {font-family: Arial, Helvetica, sans-serif;}

/* Full-width input fields */
input[type=text], input[type=password] {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  box-sizing: border-box;
}

/* Set a style for all buttons */
button {
  background-color: #04AA6D;
  color: white;
  padding: 14px 20px;
  margin: 8px 0;
  border: none;
  cursor: pointer;
  width: 100%;
}

button:hover {
  opacity: 0.8;
}

/* Extra styles for the cancel button */
.cancelbtn {
  width: auto;
  padding: 10px 18px;
  background-color: #f44336;
}

/* Center the image and position the close button */
.imgcontainer {
  text-align: center;
  margin: 24px 0 12px 0;
  position: relative;
}

img.avatar {
  border-radius: 50%;
}

.container {
  padding: 16px;
}

span.psw {
  float: right;
  padding-top: 16px;
}

/* The Modal (background) */
.modal {
  display: block; /* Hidden by default */
  position: relative; /* Stay in place */
  width: 100%; /* Full width */
  height: auto; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  padding-top: 0px;
}

/* Modal Content/Box */
.modal-content {
  background-color: #fefefe;
  margin: 20px auto 20px auto; /* 5% from the top, 15% from the bottom and centered */
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
}

/* The Close Button (x) */
.close {
  position: absolute;
  right: 25px;
  top: 0;
  color: #000;
  font-size: 35px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: red;
  cursor: pointer;
}

/* Change styles for span and cancel button on extra small screens */
@media screen and (max-width: 300px) {
  span.psw {
     display: block;
     float: none;
  }
  .cancelbtn {
     width: 100%;
  }
}

.avatar {
  width: 75px;
  height: 75px;
  background-color: #04AA6D;
}

.ov {
  overflow: auto;
}

</style>
</head>
<body>

<div id="id01" class="modal">
  
  <form id="form1" class="modal-content animate">
    <input type="hidden" id="_csrf" name="_csrf" value="{{csrfToken}}">
    <input type="hidden" id="_code" name="_code" value="{{code}}">

    <div class="imgcontainer">
      <img class="avatar"></img>
    </div>

    <div class="container">
      <label for="uname"><b>Username</b></label>
      <input type="text" placeholder="Enter Username" id="uname" name="uname" value="admin" required>

      <label for="psw"><b>Password</b></label>
      <input type="password" placeholder="Enter Password" id="psw" name="psw" value="47EC2DD791E31E2EF2076CAF64ED9B3D" required>
        
      <button type="submit">Login</button>
      <label>
        <input type="checkbox" checked="checked" name="remember" id="remember"> Remember me
      </label>
    </div>

    <div class="container" style="background-color:#f1f1f1">
      <pre class="ov" id="json"></pre>
    </div>
  </form>
</div>

<script src="/js/axios.min.js"></script>
<script src="/js/crypto-js.min.js"></script>
<script>
  var oauthServerUrl = 'http://localhost:5000';
  var clientId = 'crmapp';
  var clientSecret = 'testse';

  function getQueryParams(url) {
    const paramArr = url.slice(url.indexOf('?') + 1).split('&');
    const params = {};
    paramArr.map(param => {
        const [key, val] = param.split('=');
        params[key] = decodeURIComponent(val);
    })
    return params;
  }

  function redirectCSRF() {
    window.location.href = oauthServerUrl + `/api/oauth/v1/authorization?clientId=${clientId}&responseType=code&grantType=authorization_code`;
  }

  async function validateCode(code) {
    try {
      const sha256 = CryptoJS.HmacSHA256(clientId + '###' + code,
        clientSecret,
      );

      const signature = CryptoJS.enc.Hex.stringify(sha256);

      const result = await axios.get(oauthServerUrl + `/api/oauth/v1/authorization/validate/${clientId}/${code}/${signature}`);

      var element = document.getElementById("json");
      element.innerHTML = JSON.stringify(result.data, undefined, 2);
    } catch (e) {
      alert('get token failed');
    }
  }

  async function onSubmit(csrf) {
  
    var username = document.getElementById("uname").value;
    var password = document.getElementById("psw").value;
    var remember_me = document.getElementById("remember").checked ? true : false;

    try {
      const result = await axios.post(oauthServerUrl + `/api/oauth/v1/jwt/oauth/authorization-code/login`, {
        clientId,
        username: "admin",
        password: "47EC2DD791E31E2EF2076CAF64ED9B3D",
        remember_me,
        expires_in: "30m"
      }, {
        headers: {'csrf': csrf}
      });

      const responseUrl = result.request.responseURL;

      window.location.href = responseUrl;
    } catch (e) {
      alert('login failed');
    }
  }

  const searchParams = getQueryParams(window.location.href);

  if (searchParams.code !== undefined) {
    document.getElementById("_code").value = searchParams.code;
  }
  if (searchParams.state !== undefined) {
    document.getElementById("_csrf").value = searchParams.state;
  }

  var csrf = document.getElementById("_csrf").value;
  var code = document.getElementById("_code").value;

  if (code !== '') {
    // to validate code state
    
    validateCode(code);
  } else if (csrf === '') {
    // to get CSRF state

    redirectCSRF();
  } else {
    // type username password state
    document.getElementById("form1").addEventListener("submit", function(event){
      event.preventDefault();
      onSubmit(csrf);
    });
  }


</script>

</body>
</html>
